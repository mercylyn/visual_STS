#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Mar 24 16:13:10 2017@author: A. Vos en M.D. Wiemer"""# importing modulesimport osimport sysimport vlcimport pygame as pgfrom enum import Enumimport randomimport openpyxl as xlimport datetime# Enum for states class global_states(Enum):    subject = 0    tutorial = 1    trials = 2    end = 3class trial_states(Enum):    title = 0    media = 1    score = 2    finished = 3class TextBox():    '''Box containing one or multiple lines of text.'''    def __init__(self, message, font, color=pg.Color(255,255,255)):        self.font = font        self.height = font.get_height()        self.message = message        self.color = color        self.position = [0, 0]        self.create_surfaces()    def set_text(self, text):        self.message = text        self.create_surfaces()    def create_surfaces(self):        lines = self.message.split('\n')        self.surfaces = [self.font.render(lines[i],                                          True,                                          self.color) for i in range(len(lines))]        return self.surfaces            def draw(self, screen, position):        for i in range(len(self.surfaces)):            rect = self.surfaces[i].get_rect()            rect.center = (position[0], i * self.height + position[1])            screen.blit(self.surfaces[i], rect)class KeyButton(TextBox):    '''object that tracks the state of a single key'''    def __init__(self, key, font, color=pg.Color(255,255,255)):        super().__init__(pg.key.name(key), font, color)        self.key = key                self.state = False # False for unpressed        self.is_key_down = False        self.is_key_up = False        def draw(self, screen, position):                rect = self.surfaces[0].get_rect()        rect.center = position        rect = rect.inflate(10,10)                if self.state:            pg.draw.rect(screen, self.color // pg.Color(2,2,2), rect)                pg.draw.rect(screen, self.color, rect, 3)                super().draw(screen, position)        def key_up(self):        press = pg.key.get_pressed()[self.key]                self.is_key_up = self.state and not press        self.state = press                    return self.is_key_upclass Experiment():    def __init__(self, audio_exp=True, enable_esc=False, repeats=9):        self.audio_exp = audio_exp #in class or in def        self.enable_esc = enable_esc                self.repeats = repeats        self.state_global = -1 #non state        self.trial_state = -1        pg.init()        self.clock = pg.time.Clock() #frames per second         self.screen = None         self.title_font = pg.font.Font('FreeSans.ttf', 40)        self.body_font = pg.font.Font('FreeSans.ttf', 32)        self.text_title = TextBox("Tutorial", self.title_font)        self.text_body = TextBox("", self.body_font)        self.vlc_instance = vlc.Instance('--input-repeat=%i'%self.repeats)        self.player = self.vlc_instance.media_player_new()        self.player.video_set_mouse_input(False)        self.player.video_set_key_input(False)                self.spacebar_btn = KeyButton(pg.K_SPACE, self.body_font)        self.spacebar_btn.set_text("Druk op spatiebalk voor de volgende trial.")                self.score_btns = [KeyButton(pg.K_1 + i, self.body_font) for i in range(5)]    def start(self):        self.set_state_global(global_states.subject) # Set global state for the first time        running = True        while running:            if self.screen != None:                self.screen.fill(pg.Color(0,0,0))            if self.state_global == global_states.subject:                self.state_subject()            elif self.state_global == global_states.tutorial:                self.state_tutorial()            elif self.state_global == global_states.trials:                self.state_trials()            elif self.state_global == global_states.end:                self.state_end()            else:                pg.event.post(pg.event.Event(pg.QUIT))            pg.display.update()            self.clock.tick(60)            for event in pg.event.get():                if event.type == pg.KEYDOWN:                    if event.key == pg.K_ESCAPE and self.enable_esc:                        pg.event.post(pg.event.Event(pg.QUIT))                                if event.type == pg.QUIT:                    running = False        print("Destroy screen")        self.player.pause()        pg.quit()    def set_state_global(self, new_state):        prev_state = self.state_global        self.state_global = new_state        print("Change global state from %s to %s."%(prev_state, new_state))        if prev_state == global_states.subject:            self.create_screen(1920, 1080, fullscreen=True) #True = full screen        elif prev_state == global_states.tutorial or prev_state == global_states.trials:            self.set_state_trial(-1)        if new_state == global_states.tutorial:            self.text_title.set_text("Tutorial")            self.text_body.set_text("""            Welkom bij het experiment! U neemt deel aan een Speech-to-Song illusion experiment.                        In dit experiment worden er audio-fragmenten laten horen. De audio-fragmenten klinken            als spraak of als zang. Elke trial bestaat uit 10 herhalingen van het audio-fragment.            Na de trial wordt er gevraagd of u het audio-fragment wilt beoordelen met een            vijfpuntenschaal op spraak- of zangidentiteit. Hierbij maakt u gebruik van de            nummertoetsen 1 tot en met 5, waarbij 1 = net als spraak (gesproken) en            5 = net als zang (gezongen).            U begint met twee test-trials en daarna begint het experiment. Mocht de opzet            van het experiment na de test-trials nog niet duidelijk zijn, geef dit dan door            aan de begeleider.                         """)            self.current_example = 0        elif new_state == global_states.trials:            self.current_trial = 0        elif new_state == global_states.end:            self.text_title.set_text("Einde experiment")            self.text_body.set_text("Bedankt voor uw deelname!")            self.spacebar_btn.set_text("Druk op de spatiebalk om het scherm af te sluiten.")                def set_state_trial(self, new_state):        prev_state = self.trial_state        self.trial_state= new_state        print("Change trial state from %s to %s."%(prev_state, new_state))        if new_state == trial_states.title:            if self.state_global == global_states.tutorial:                self.media = self.select_tutorial_media(example=self.current_example)            else:                self.media, self.trial_index = self.select_media()                        if self.state_global != global_states.tutorial:                self.current_trial += 1                                # Show number of current trial                self.text_title.set_text("Trial #%i"%self.current_trial)                                if self.current_trial == 1: # Show only after tutorial                    self.text_title.set_text("Einde oefenfase")                    self.text_body.set_text(                    """ Druk op de spatiebalk wanneer uw gereed bent voor het experiment""")                else:                    # Reset body text to remove score text from previous trial                    self.text_body.set_text("")            elif self.current_example > 0:                # Reset body text to remove score text from previous example                self.text_title.set_text("")                self.text_body.set_text("")                        elif new_state == trial_states.media:            self.bind_vlc()            self.player.set_media(self.media)            pg.mixer.quit()            self.player.play()                    elif new_state == trial_states.score:            self.score = 0                        self.player.stop()            self.text_title.set_text("Beoordeling geluidsfragment")             self.text_body.set_text("""            Voer een score van 1 tot 5 in (maak gebruik van de nummertoetsen)                                                 1 = net als spraak                        5 = net als zang""")                elif new_state == trial_states.finished:            if self.state_global == global_states.trials:                del self.trial_backlog[self.trial_idx]            else:                self.current_example += 1                        self.trial_state = -1            # experiment informatie proefpersoon en trials    def state_subject(self):        self.user = input("PPN: ")        self.n_trials = int(input("Number of trials: "))        self.trial_backlog = list(range(self.n_trials))        self.scores = [-1 for i in range(self.n_trials)]        self.set_state_global(global_states.tutorial)    def state_tutorial(self):        if self.current_example < 2:            self.trial()        else:            self.set_state_global(global_states.trials)    def state_trials(self):        if len(self.trial_backlog) > 0:            self.trial()        else:            self.set_state_global(global_states.end)    def state_end(self):        self.text_title.draw(self.screen,                             (self.screen.get_width() / 2, 60))                    self.text_body.draw(self.screen,                            (self.screen.get_width() / 2, 100))        self.spacebar_btn.draw(self.screen, (self.screen.get_width() / 2, 600))                if self.spacebar_btn.key_up():            print(self.scores)            self.set_state_global(-1)    def trial(self):        if self.trial_state == -1:            self.set_state_trial(trial_states.title)        elif self.trial_state == trial_states.title:            self.text_title.draw(self.screen,                             (self.screen.get_width() / 2, 60))                        self.text_body.draw(self.screen,                                (self.screen.get_width() / 2, 100))                        self.spacebar_btn.draw(self.screen, (self.screen.get_width() / 2, 600))            if self.spacebar_btn.key_up():                self.set_state_trial(trial_states.media)        elif self.trial_state == trial_states.media:            if self.player.get_state() == vlc.State.Ended:                self.set_state_trial(trial_states.score)        elif self.trial_state == trial_states.score:            self.text_title.draw(self.screen, (self.screen.get_width() / 2, 60))            self.text_body.draw(self.screen, (self.screen.get_width() / 2, 100))                        for i in range(len(self.score_btns)):                self.score_btns[i].draw(self.screen,                (self.screen.get_width() / 4 + i * self.screen.get_width() / 8, 250))                        self.score = self.get_score()                        if self.score > 0 and self.score <= 5:                if self.state_global != global_states.tutorial:                    print("Entered score %i"%self.score)                    self.scores[self.trial_index] = self.score                                self.set_state_trial(trial_states.finished)    def save(self):        file = "results.xlsx"                if os.path.exists(file):            print("Load file %s"%file)            wb = xl.load_workbook(file)        else:            print("Could not find file %s, creating new"%file)            wb = xl.Workbook()                sheet = wb.active                data = [self.user, self.audio_exp, datetime.datetime.now()] + self.scores                print("Adding data %s"%data)        sheet.append(data)                wb.save(file)    def create_screen(self, width, height, fullscreen=False):        if fullscreen:            self.screen = pg.display.set_mode((width,height), pg.FULLSCREEN)        else:            self.screen = pg.display.set_mode((width,height))    def bind_vlc(self):        win_id = pg.display.get_wm_info()['window']        if sys.platform == "linux": # for Linux using the X Server            self.player.set_xwindow(win_id)        elif sys.platform == "win32": # for Windows            self.player.set_hwnd(win_id)        elif sys.platform == "darwin": # for MacOS            self.player.set_agl(win_id)    def select_tutorial_media(self, example=0):        if self.audio_exp:            path = os.path.expanduser("stimuli/tutorial_sts_%i.wav"%example)        else:            path = os.path.expanduser("stimuli/tutorial_sts_%i.mp4"%example)                    return self.vlc_instance.media_new(path)                def select_media(self):        self.trial_idx = random.randint(0, len(self.trial_backlog) - 1)        trial = self.trial_backlog[self.trial_idx]        path = ""        if self.audio_exp:            path = os.path.expanduser("stimuli/%i_stim_a.wav"%trial)        else:            path = os.path.expanduser("stimuli/%i_stim_v.mp4"%trial)        print(os.path.exists(path))        print("Selected file %s. Remaining trials: %s."%(path, self.trial_backlog))        return self.vlc_instance.media_new(path), trial    def get_score(self):        for i in range(len(self.score_btns)):            if self.score_btns[i].key_up():                return i+1        return 0        if __name__ == "__main__":    if sys.platform == "win32":        os.environ["SDL_VIDEODRIVER"] = "directx"    print("Setting up experiment")    experiment = Experiment(audio_exp=True, enable_esc=True, repeats=9)    experiment.start()    experiment.save()    #sys.exit(1)